openapi: 3.1.0
info:
  title: API сервер для проекта «6 городов».
  description: |-
    * Список ресурсов и маршрутов сервера «6 городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: offers
    description: Действия с объявлениями.
  - name: comments
    description: Действия с комментариями.
  - name: users
    description: Действия с пользователем.
  - name: favorites
    description: Действия с избранными предложениями.

paths:
  # Предложения
  /offers:
    get:
      summary: Получение списка предложений по аренде
      tags:
        - Offers
      responses:
        '200':
          description: Успешное получение списка предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferShort'

    post:
      summary: Создание нового предложения
      tags:
        - Offers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOfferRequest'
      responses:
        '201':
          description: Предложение успешно создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'

  /offers/{offerId}:
    get:
      summary: Получение детальной информации о предложении
      tags:
        - Offers
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешное получение детальной информации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '404':
          description:  Предложение не найдено

    put:
      summary: Редактирование предложения
      tags:
        - Offers
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOfferRequest'
      responses:
        '200':
          description: Предложение успешно обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'

    delete:
      summary: Удаление предложения
      tags:
        - Offers
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Предложение успешно удалено

  # Комментарии
  /offers/{offerId}/comments:
    get:
      summary: Получение списка комментариев для предложения
      tags:
        - Comments
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешное получение списка комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description:  Предложение не найдено


    post:
      summary: Добавление комментария для предложения
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Комментарий успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  # Пользователи
  /users:
    post:
      summary: Создание нового пользователя
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/login:
    post:
      summary: Вход в закрытую часть приложения
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Неверный логин или пароль

  /users/logout:
    post:
      summary: Выход из закрытой части приложения
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Успешный выход

  /users/status:
    get:
      summary: Проверка состояния пользователя
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Статус пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'

  # Премиальные предложения
  /offers/premium:
    get:
      summary: Получение списка премиальных предложений для города
      tags:
        - Offers
      parameters:
        - name: city
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение премиальных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferShort'

  # Избранное
  /favorites:
    get:
      summary: Получения списка предложений, добавленных в избранное
      tags:
        - Favorites
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение избранных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferShort'

  /favorites/{offerId}:
    post:
      summary: Добавление предложения в избранное
      tags:
        - Favorites
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Предложение добавлено в избранное
        '404':
          description:  Предложение не найдено

    delete:
      summary: Удаление предложения из избранного
      tags:
        - Favorites
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Предложение удалено из избранного
        '404':
          description:  Предложение не найдено


components:
  schemas:
    # Основные схемы
    Offer:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        city:
          type: string
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        type:
          type: string
        rating:
          type: number
        bedrooms:
          type: integer
        maxGuests:
          type: integer
        price:
          type: integer
        amenities:
          type: array
          items:
            type: string
        host:
          $ref: '#/components/schemas/User'
        location:
          $ref: '#/components/schemas/Location'
        isFavorite:
          type: boolean
        author:
          $ref: '#/components/schemas/User'


    OfferShort:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        city:
          type: string
        previewImage:
          type: string
        isPremium:
          type: boolean
        type:
          type: string
        rating:
          type: number
        price:
          type: integer
        isFavorite:
          type: boolean
        author:
          $ref: '#/components/schemas/User'

    CreateOfferRequest:
      type: object
      required:
        - title
        - description
        - city
        - previewImage
        - images
        - isPremium
        - type
        - bedrooms
        - maxGuests
        - price
        - amenities
        - location
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
          minItems: 6
          maxItems: 6
        isPremium:
          type: boolean
        type:
          type: string
          enum: [apartment, house, room, hotel]
        bedrooms:
          type: integer
          minimum: 1
          maximum: 8
        maxGuests:
          type: integer
          minimum: 1
          maximum: 10
        price:
          type: integer
          minimum: 100
          maximum: 100000
        amenities:
          type: array
          items:
            type: string
        location:
          $ref: '#/components/schemas/Location'
        author:
          $ref: '#/components/schemas/User'

    UpdateOfferRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
          minItems: 6
          maxItems: 6
        isPremium:
          type: boolean
        type:
          type: string
          enum: [apartment, house, room, hotel]
        bedrooms:
          type: integer
          minimum: 1
          maximum: 8
        maxGuests:
          type: integer
          minimum: 1
          maximum: 10
        price:
          type: integer
          minimum: 100
          maximum: 100000
        amenities:
          type: array
          items:
            type: string
        location:
          $ref: '#/components/schemas/Location'

    Comment:
      type: object
      properties:
        id:
          type: integer
        comment:
          type: string
        date:
          type: string
          format: date-time
        rating:
          type: integer
          minimum: 1
          maximum: 5
        user:
          $ref: '#/components/schemas/User'

    CreateCommentRequest:
      type: object
      required:
        - comment
        - rating
      properties:
        comment:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: integer
          minimum: 1
          maximum: 5

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        isPro:
          type: boolean

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 12
        avatarUrl:
          type: string
        isPro:
          type: boolean

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    UserStatus:
      type: object
      properties:
        isAuthenticated:
          type: boolean
        user:
          $ref: '#/components/schemas/User'

    Location:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
        longitude:
          type: number

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
